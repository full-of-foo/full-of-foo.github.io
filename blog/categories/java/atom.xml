<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | ]]></title>
  <link href="http:///blog/categories/java/atom.xml" rel="self"/>
  <link href="http:///"/>
  <updated>2017-03-20T21:05:39+00:00</updated>
  <id>http:///</id>
  <author>
    <name><![CDATA[Anthony Troy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mutation Testing Is Awesome: PIT for the JVM]]></title>
    <link href="http:///blog/2017/03/12/mutation-testing-is-awesome-pit-for-the-jvm/"/>
    <updated>2017-03-12T12:17:39+00:00</updated>
    <id>http:///blog/2017/03/12/mutation-testing-is-awesome-pit-for-the-jvm</id>
    <content type="html"><![CDATA[<p><img src="/images/dil.jpg" alt="dil" /></p>

<p>Nowadays its not all that popular to be a testing enthusiast or fanatic.</p>

<p>After all, <a href="http://removingalldoubt.com/post/2006/09/19/Fatherly-Advice-To-New-Programmers.aspx">real developers ship</a> and <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead</a>, so developers ought to spend
less time getting caught up in testing-related hogwash and instead focus on the immediate
churning out of what is at hand. Be <a href="https://thenewstack.io/10x-programmer-just-jerk/">10x</a>, <a href="https://xkcd.com/1428/">move fast and break things</a>, pew pew pew, and so on, and so on.</p>

<p><img src="/images/neck.png" alt="neck" />
Free time from shipping our way to <a href="https://en.wikipedia.org/wiki/Unicorn_(finance)">software unicorn</a> land is often spent perusing
blog posts from high-culture <a href="https://news.ycombinator.com">engineering forums</a>. In doing so you
may have stumbled upon this strange blog, and, much too your dismay we&rsquo;ll be getting into plenty of
1x testing nonsense. Sarcasm aside, here we&rsquo;re going to explore and demonstrate some things like <a href="https://en.wikipedia.org/wiki/Mutation_testing">Mutation Testing</a>, <a href="http://mcminn.io/publications/j18.pdf">Code Coverage</a> and <a href="http://patricklam.ca/stqam/2010/notes/pdf/L3.pdf">Subsumption</a>.</p>

<p>- Buckle up buckaroos.</p>

<h2>Back to Basics, Yo</h2>

<p>Remember, you might want to begin rolling your eyes when you hear the terms &ldquo;complete testing&rdquo;, &ldquo;exhaustive testing&rdquo;, and &ldquo;full coverage&rdquo;. They are each poorly defined due to a
theoretical limitation of software - the number of potential
inputs for most programs is so large that they are effectively infinite.</p>

<p><img src="/images/rly.png" alt="rly" />
Consider <code>javac</code>. As a software artifact its potential inputs include not only every Java
program, but all strings. Its only limitation is the size of the file that can be read by the parser. Therefore, the number of inputs is effectively infinite and cannot be explicitly enumerated. It can never have &ldquo;full coverage&rdquo;.</p>

<p>Enter formal <a href="http://mcminn.io/publications/j18.pdf">coverage criteria</a>. As it is not feasible to generate all test inputs,
coverage criteria can be used to decide our inputs. The supposition here is that
coverage criteria will more effectively reveal faults (over using <code>n</code> arbitrary inputs).
Albeit expensive, the most obvious way to use criteria is to directly generate test case values
to satisfy the criterion <code>C</code>.</p>

<p>However, in practice we generally manually create an arbitrary amount of pseudo-random inputs, and then measure the tests against the criterion in terms of their coverage.
On the surface this understandable. Generating tests to directly satisfy
a criterion is hard, really hard. This particularly true when attempting generate test paths
for <a href="http://swtv.kaist.ac.kr/courses/cs453-fall09/graph_coverage.pdf">graph coverage criteria</a>.</p>

<p>Not all is lost though. More flexible criteria do exist which, more importantly, can actually be used sustainably against real programs.</p>

<h2>Kanye test Grammar?</h2>

<p>The most common coverage criteria generate tests to satisfy their criterion based on either graphs, logical expressions, or partitions of input space. Graph and logical models are built from software artifacts (such as source code, design descriptions and specifications). Similarly, a model of the inputs can be built based on some description of an input space. Test criteria can then be applied to these models.
<img src="/images/kanye.png" alt="kanye" /></p>

<p>Another major method of deriving coverage criteria is though the syntactic descriptions of software artifacts. Under syntax-based testing, the syntax of the software artifact is used as the
criteria model and tests are created from the syntax. One of the interesting things that grammars do is describe what an input <em>is not</em>. We say that an input is valid if it is <em>in the language</em> specified by the grammar, and
invalid otherwise.</p>

<p>Thus, it is often useful to produce invalid strings from a grammar. It is also helpful
in testing to use strings that are valid but that follow a different derivation from
a pre-existing string. This general use of grammar in testing is known as
mutation analysis, and it can be applied most types of software artifacts.</p>

<p>Albeit this all quite theoretical feeling thus far, mutation analysis has paved the
way for what is currently argued to be the <a href="http://crestweb.cs.ucl.ac.uk/resources/mutation_testing_repository/search_paper.php?func=2&amp;pid=OffuttMK04">gold standard</a> in software testing; <a href="https://en.wikipedia.org/wiki/Mutation_testing">Program-based Mutation Testing</a>.</p>

<h2>Mutant Ninja Testing</h2>

<p>Although mutation testing sounds somewhat highbrow, its conceptually quite simple.
Faults, or <em>mutations</em>, are injected into one&rsquo;s testing target, and when those tests are ran there are total and per case mutation adequacy scores derived. Under most systems, given those tests have failed then the mutation is <em>killed</em> and if they have passed then the mutation has <em>survived</em>.
In turn, this total percentage of mutations killed acts as a testing criterion for
test case quality.</p>

<p>So, unlike traditional test coverage criteria that only measure which code is executed
by your tests, mutation testing actually measures the ability of your tests in revealing faults.
This premise of mutation testing is intuitively appealing; we can discover the input
data that can be used to reveal real faults. Nevertheless, as highlighted earlier, it is
not possible for any system to generate every possible permutation of
mutant in a candidate program.</p>

<p><img src="/images/turt.png" alt="turt" />
Consequently, mutation testing systems will only offer a finite set of injectable mutators. So, hopeful that these finite amount mutators will reveal faults, mutation testing can be
said to rely on two assumptions: the <a href="https://edisciplinas.usp.br/pluginfile.php/1943431/mod_resource/content/1/Hints_on_Test_Data_Selection-Demillo.pdf">Competent Programmer Hypothesis (CPH)
and Coupling Effect</a>.</p>

<p>The CPH asserts that a program produced by a competent programmer is
close to the final correct version of a program. Thus, it is assumed that the
source faults introduced by a competent programmer are relatively simple and
can be corrected by small syntactical changes. Accordingly, in mutation testing
only simple syntactical mutations are generally used. Contrarily, the Coupling
Effect brings the suggestion that tests capable of catching first order mutations
will also detect higher order mutations that contain these first order mutations.</p>

<h2>Strong and Weak Mutations</h2>

<p>The implementation of mutation testing systems
are generally characterised in terms of their adopted mutation generation techniques.
Another distinction can be made with respect to
how a given tool analyses how mutants are killed during the execution process.
Such techniques can be classified as employing strong or weak mutation.
Under strong mutation given program <em>p</em>, a
mutant <em>m</em> of program <em>p</em> is said to be killed only if mutant <em>m</em> gives a different
output from the original program <em>p</em>.
<img src="/images/jug.png" alt="jug" /></p>

<p>In contrast, weak mutation requires only that the value produced at the point
we introduce <em>m</em> is different from the corresponding value in <em>p</em> for <em>m</em> to be killed.
This more optimal approach is adopted by tools such as <a href="http://pitest.org">PIT</a>; instead of analysing each mutant after the execution of the entire run,
mutants are checked immediately after their respective execution point.</p>

<h2>Killing Mutants with PIT: (╯°□°)&ndash;︻╦╤─ - - -</h2>

<p><a href="http://pitest.org">PIT</a> is an <a href="https://github.com/hcoles/pitest">open-source</a> mutation testing framework
for Java and the JVM. Formerly being named Parallel Isolated Test, the project&rsquo;s
initial function was to isolate static state through running JUnit tests in parallel
using separate classloaders, however the author later found that this turned out
to be a much less interesting problem than mutation testing which initially
needed a lot of the same plumbing.</p>

<p>Most importantly, as far as mutation testing projects go, PIT is <a href="http://pitest.org/sky_experience/">commercially popular</a>
and <a href="https://github.com/hcoles/pitest/releases">actively contributed to</a>. As you would expect, it too has first-class support for
the things like JUnit4, TestNg, Ant and Maven. Third-party support does also exist
for Gradle, Eclipse and InteliJ integrations.</p>

<p>In terms of design, mutation testing systems generally derive adequacy scores in four phases:
mutant generation, test selection, mutant insertion and mutant detection. PIT parallelises
these phases, making a mutation coverage run feel almost like a traditional statement coverage run.
Most testing frameworks in this space have adopted varying strategies in implementing each of
these phases. One reason for this disparity could be that many
JVM-based mutation testing systems have been written to meet the needs of
academic research.</p>

<p>PIT is currently positioned as being the most performant mutation testing tool
today, primarily due to fact that it adopts an effective byte code based approach in the mutant detection and generation phases. Generally systems will adopt either a source code or byte
based approach at these stages. Using byte code during the mutation detection phase
is quite computationally expensive, though this can be offset by an effective test
selection phase.
<img src="/images/doge2.png" alt="doge2" /></p>

<p>Additionally, systems using source code at the generation stage
can also incur a large computational cost if a naive approach is followed. Tools
like <a href="https://cs.gmu.edu/~offutt/mujava/">MuJava</a>, <a href="https://github.com/david-schuler/javalanche">Javalanche</a> and <a href="http://jumble.sourceforge.net/">Jumble</a> too use byte code generation, however PIT performs various other optimisations. Rather than blindly running all cases against one mutation PIT will
first determine overall line coverage and subsequently run only those cases that
can actually reach the mutation.</p>

<h2>The Super Complicated Test Candidate</h2>

<p>Most tech blogs love using real-world code examples, so lets not be an exception to
that rule. Here we define a program that
allows one <a href="http://russcon.org/triangle_classification.html">classify a triangle</a> shape based on three supplied coordinates. A classification can be either equilateral, isosceles, scalene or invalid. Accordingly we implement a <code>TriangleType</code>
enum and following we define our <code>Triangle</code> class with one static method for classification.</p>

<pre><code class="java">public enum TriangleType {
  INVALID, SCALENE, EQUILATERAL, ISOSCELES
}
</code></pre>

<pre><code class="java">public class Triangle {
  public static TriangleType classify(final int a, final int b, final int c) {
    int trian;
    if ((a &lt;= 0) || (b &lt;= 0) || (c &lt;= 0)) {
      return TriangleType.INVALID;
    }
    trian = 0;
    if (a == b) {
      trian = trian + 1;
    }
    if (a == c) {
      trian = trian + 2;
    }
    if (b == c) {
      trian = trian + 3;
    }
    if (trian == 0) {
      if (((a + b) &lt; c) || ((a + c) &lt; b) || ((b + c) &lt; a)) {
        return TriangleType.INVALID;
      } else {
        return TriangleType.SCALENE;
      }
    }
    if (trian &gt; 3) {
      return TriangleType.EQUILATERAL;
    }
    if ((trian == 1) &amp;&amp; ((a + b) &gt; c)) {
      return TriangleType.ISOSCELES;
    } else if ((trian == 2) &amp;&amp; ((a + c) &gt; b)) {
      return TriangleType.ISOSCELES;
    } else if ((trian == 3) &amp;&amp; ((b + c) &gt; a)) {
      return TriangleType.ISOSCELES;
    }
    return TriangleType.INVALID;
  }
}
</code></pre>

<p>We also implement a <code>TriangleTest</code> case, and because we&rsquo;re good testers we ensure to meet total line coverage:
<code>java
public class TriangleTest {
  @Test
  public void test1() {
    final TriangleType type = Triangle.classify(1, 2, 3);
    assertEquals(SCALENE, type);
  }
  @Test
  public void testInvalid1() {
    final TriangleType type = Triangle.classify(1, 2, 4);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalid2() {
    final TriangleType type = Triangle.classify(1, 4, 2);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalid3() {
    final TriangleType type = Triangle.classify(4, 1, 2);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalidNeg1() {
    final TriangleType type = Triangle.classify(-1, 1, 1);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalidNeg2() {
    final TriangleType type = Triangle.classify(1, -1, 1);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalidNeg3() {
    final TriangleType type = Triangle.classify(1, 1, -1);
    assertEquals(INVALID, type);
  }
  @Test
  public void testEquiliteral() {
    final TriangleType type = Triangle.classify(1, 1, 1);
    assertEquals(EQUILATERAL, type);
  }
  @Test
  public void testIsoceles1() {
    final TriangleType type = Triangle.classify(2, 2, 3);
    assertEquals(ISOSCELES, type);
  }
  @Test
  public void testIsoceles2() {
    final TriangleType type = Triangle.classify(2, 3, 2);
    assertEquals(ISOSCELES, type);
  }
  @Test
  public void testIsoceles3() {
    final TriangleType type = Triangle.classify(3, 2, 2);
    assertEquals(ISOSCELES, type);
  }
  @Test
  public void testInvalid() {
    final TriangleType type = Triangle.classify(3, 1, 1);
    assertEquals(INVALID, type);
  }
}
</code></p>

<p>So now lets gets webscale and get our candidate unit tested and mutation tested
under Maven. The <code>pitest</code> artifact and its related dependencies are hosted by Sonatype so we can add the typical <a href="https://github.com/full-of-foo/pit-coverage-tool-review/blob/master/practical/maven-pit-review/pom.xml#L9"><code>oss-sonatype</code></a> <code>repository</code> and <code>pluginRepository</code> entries to our <code>pom.xml</code>. We can then simply  configure PIT under JUnit4 as follows:
<code>xml
  ...
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.11&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.4&lt;/version&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.pitest&lt;/groupId&gt;
            &lt;artifactId&gt;pitest-maven&lt;/artifactId&gt;
            &lt;version&gt;1.1.10-SNAPSHOT&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;verify&lt;/id&gt;
                    &lt;phase&gt;verify&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;mutationCoverage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
  ...
</code>
Unless we configure PIT to employ a <a href="https://github.com/full-of-foo/pit-coverage-tool-review/blob/master/practical/maven-pit-review/all-configs-pom.xml#L75">whitelist of mutation operations</a>,
it will use a default of four default mutation operations. Of a possible sixteen
operations these four are perhaps the most useful and least expensive:</p>

<ol>
<li>Negate Conditionals Mutator inverts all conditionals
to their boundary counterpart.

<ul>
<li><code>boolean a = 1 == 2;</code> becomes mutated to <code>boolean a = 1 != 2;</code></li>
</ul>
</li>
<li>Conditionals Boundary Mutator replaces relational operators
with their boundary counterpart.

<ul>
<li><code>int a = 1 &gt; 2;</code> becomes mutated to <code>int a = 1 &lt;= 2;</code></li>
</ul>
</li>
<li>Return Values Mutator mutates the return values of method calls.

<ul>
<li><code>return new Object();</code> becomes mutated to <code>new Object(); return null;</code></li>
<li><code>return new Long(123);</code> becomes mutated to <code>return new Long(123)+1;</code></li>
</ul>
</li>
<li>Math Mutator replaces binary arithmetic operations for either integer or floating-point arithmetic with another operation.

<ul>
<li><code>int a = 1 + 1</code> becomes mutated to <code>int a = 1 - 1</code></li>
</ul>
</li>
</ol>


<h2>Testing Tests While Testing</h2>

<p>Given our configuration, PIT will now perform mutation testing at end the of the Maven <code>verfiy</code> lifecycle
phases (after <code>test</code>). This involves running both line coverage and mutation coverage testing:</p>

<pre><code class="bash">&gt; $ mvn verify
            ....
[INFO] Adding org.pitest:pitest to SUT classpath
[INFO] Mutating from /usr/src/app/maven-pit-review/target/classes
[INFO] Defaulting to group id (com.review.app*)
PIT &gt;&gt; INFO : Sending 1 test classes to minion
PIT &gt;&gt; INFO : Sent tests to minion
PIT &gt;&gt; INFO : MINION : PIT &gt;&gt; INFO : Checking environment
PIT &gt;&gt; INFO : MINION : PIT &gt;&gt; INFO : Found  12 tests
PIT &gt;&gt; INFO : MINION : PIT &gt;&gt; INFO : Dependency analysis reduced number of potential tests by 0
PIT &gt;&gt; INFO : MINION : PIT &gt;&gt; INFO : 12 tests received
PIT &gt;&gt; INFO : Calculated coverage in 0 seconds.
PIT &gt;&gt; INFO : Created  1 mutation test units
PIT &gt;&gt; INFO : Completed in 3 seconds
              ....
================================================================================
- Statistics
================================================================================
&gt;&gt; Generated 44 mutations Killed 36 (82%)
&gt;&gt; Ran 115 tests (2.61 tests per mutation)
================================================================================
- Mutators
================================================================================
&gt; org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator
&gt;&gt; Generated 10 Killed 2 (20%)
&gt; KILLED 2 SURVIVED 8 TIMED_OUT 0 NON_VIABLE 0
&gt; MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0
&gt; NO_COVERAGE 0
--------------------------------------------------------------------------------
&gt; org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator
&gt;&gt; Generated 8 Killed 8 (100%)
&gt; KILLED 8 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0
&gt; MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0
&gt; NO_COVERAGE 0
--------------------------------------------------------------------------------
&gt; org.pitest.mutationtest.engine.gregor.mutators.MathMutator
&gt;&gt; Generated 9 Killed 9 (100%)
&gt; KILLED 9 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0
&gt; MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0
&gt; NO_COVERAGE 0
--------------------------------------------------------------------------------
&gt; org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator
&gt;&gt; Generated 17 Killed 17 (100%)
&gt; KILLED 17 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0
&gt; MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0
&gt; NO_COVERAGE 0
--------------------------------------------------------------------------------
</code></pre>

<p>So, who would of guessed, our &ldquo;total covered&rdquo; candidate app yields 44 mutations
but eight survive. Resulting in a total mutation
adequacy score of 82%. The default mutation operations are generated
across our 12 test cases, resulting in the execution of 115 mutated test cases.
So what is this tellings us about our tests? It means for each test run against a mutated version of the program all of the mutants can be reached (because we have full statement coverage). However, for eight of these runs at least the respective fault goes unnoticed as the tests pass.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matrix Multiply: Naive vs Cache-Aware Approaches (Part 2)]]></title>
    <link href="http:///blog/2015/08/24/matrix-multiply-naive-vs-cache-aware-approaches-part-2/"/>
    <updated>2015-08-24T19:56:46+01:00</updated>
    <id>http:///blog/2015/08/24/matrix-multiply-naive-vs-cache-aware-approaches-part-2</id>
    <content type="html"><![CDATA[<h2>Matrix Multiplication Feels Bad</h2>

<p>In our <a href="/blog/2015/06/07/matrix-multiply-naive-vs-cache-aware-approaches-1/">last post</a>
we talked about the implications of both sequential and parallel naive <a href="http://en.wikipedia.org/wiki/Matrix_multiplication">Matrix-Matrix multiplication (MMM)</a>. Sadly we found that this classic triple for-loop approach suffers from
<strong><a href="http://en.wikipedia.org/wiki/Locality_of_reference">poor locality</a></strong>.</p>

<p><img src="/images/pepe.png" alt="psad" />
OMG, who would have known? Our algorithms actually sometimes need to be cache-aware.</p>

<p>This time around we will look at the tall cache
assumption along with <a href="https://en.wikipedia.org/wiki/Loop_tiling">loop-tiling</a> applied to parallel and
sequential MMM. As you would expect there are also some pretty
benchmarks involved.</p>

<h2>Cache-Awareness, So Confuse</h2>

<p>In easy terms, most of the transfers between cache and disk simply involve blocks of data. Whereby the disk is partitioned into blocks of <strong>B</strong> elements each, and accessing one element on disk copies its entire block to cache. When assuming a tall cache, the cache can store up to <strong>M/B</strong> blocks, for a total size of <strong>M</strong> elements, <strong>M &#8805; B&sup2;</strong>.</p>

<p>Meaning when the cache is already full and a block is grabbed from disk, then another block will be evicted from cache. Before exploring something more cache-aware let us demonstrate this occurring in our naive (and cache-oblivious) solution. Assuming square matrices which do not fit into a tall cache then</p>

<p style="text-align:center;">n = rowAmountOfA = colAmountOfA = rowAmountOfB</p>

<p style="text-align:center;">n > M/B</p>

<p>Bellow we see the row-major layout of matrices <strong>A</strong> and <strong>B</strong>. We depict the red rectangles in matrix <strong>B</strong> as our blocks of cache. For all rows of matrix <strong>A</strong> we traverse over each column of <strong>B</strong>. Upon traversing <strong>B</strong> the accessing of each element is cached. Given that <strong>n = colAmountOfA</strong> and <strong>n > M/B</strong> then before the traversal of a column <strong>B</strong> completes the first, and possibly several subsequent, cached blocks of <strong>B</strong> will be evicted. So upon the next and remaining traversals of <strong>B</strong> we incur cache-misses on each block</p>

<p><img src="/images/naive.png" alt="m" /></p>

<p>From this we can be quite clever and infer that a naive algorithm with <strong>n > M/B</strong> results gets the following work done</p>

<p style="text-align:center;">Q(n) = Θ(n<sup>3</sup>)</p>

<p>Which implies that a naive algorithm with <strong>n &#8804; M/B</strong> will get the following work done since the second matrix can now exploit spatial locality</p>

<p style="text-align:center;">Q(n) = Θ(n<sup>3</sup>)/B</p>

<h2>Loop-Tiling, Feels Good</h2>

<p>Lets take a look at a standard <a href="https://en.wikipedia.org/wiki/Loop_tiling">tiling</a> solution to resolve our cache capacity misses.
<img src="/images/good.png" alt="good" /></p>

<p>Pro tip: <em>loop-tiling is a type of loop transformation on which many cache blocking algorithms are built.</em></p>

<p>It involves a combination of strip-mining and interchange in multiply-nested loops, in turn strip-mines several nested loops and performs interchanges to bring the strip-loops inward.</p>

<p>This following tiling solution ensures greater spatial locality for accesses across matrix <strong>B</strong>. Simple but effective, our implementation partitions the matrices’ iteration space though such strip mining and loop interchange</p>

<pre><code class="java">s = (int) Math.ceil(rowAmount1 ∗ 1.0 / 4);
s2 = (int) Math.ceil(colAmount1 ∗ 1.0 / 4);
s3 = (int) Math.ceil(rowAmount2 ∗ 1.0 / 4);
for (i = 0; i &lt; rowAmount1 / s; i+=s){
  for (j = 0; j &lt; colAmount1 / s2; j+=s2){
    for (k = 0; k &lt; rowAmount2 /s3; k+=s3){
      for (i2 = i; i2 &lt; (i+s) &amp;&amp; i2 &lt; rowAmount1; i2++){
        for (j2 = j; j2 &lt; (j+s2) &amp;&amp; j2 &lt; colAmount1; j2++){
          for (k2 = k; k2 &lt; (k+s3) &amp;&amp; k2 &lt; rowAmount2; k2++){
            C[i2][j2] += (A[i2][k2] ∗ B[k2][j2]);
                          ....
</code></pre>

<p>Although not implemented recursively, tiling shares some similarities to the divide-and-conquer approach in that it aims to refine the problem size through partitioning the problems (matrices) into subproblems (submatrices). The design of the tiling solution quite naturally lends itself to parallelisation. Such is implemented as follows</p>

<pre><code class="java">s = (int) Math.ceil(rowAmount1 ∗ 1.0 / 4);
s2 = (int) Math.ceil(colAmount1 ∗ 1.0 / 4);
s3 = (int) Math.ceil(rowAmount2 ∗ 1.0 / 4);
executor = Executors.newFixedThreadPool(10);
for(interval = 10, end = rowAmount1,
    size = (int) Math.ceil(rowAmount1 ∗ 1.0 / 10);
    interval &gt; 0 &amp;&amp; end &gt; 0; interval−−, end −= size){
  to = end;
  from = Math.max(0, end − size);
  Runnable runnable = new Runnable(){
    @Override
    public void run() {
      for (i = from; i &lt; to / s; i+=s) {
        for (j = 0; j &lt; colAmount1 / s2; j+=s2){
          for (k = 0; k &lt; rowAmount2 /s3; k+=s3){
            for (i2 = i; i2 &lt; (i+s) &amp;&amp; i2 &lt; rowAmount1; i2++){
              for (j2 = j; j2 &lt; (j+s2) &amp;&amp; j2 &lt; colAmount1; j2++){
                for (k2 = k; k2 &lt; (k+s3) &amp;&amp; k2 &lt; rowAmount2; k2++){
                  C[i2][j2] += (A[i2][k2] ∗ B[k2][j2]);
                               ...
</code></pre>

<p>It is important to note the <strong>s</strong>, <strong>s2</strong> and <strong>s3</strong> parameters to our tiling algorithm. Above we see that they are derived respectively from a matrix dimension divided by 4. They are then later used to determine the dimensions (size <strong>s2</strong>x<strong>s3</strong>) of the submatrix-submatrix multiply tasks to be ran. In the case of a square MMM the submatrices’ dimensions would be <strong>s</strong>x<strong>s</strong>.</p>

<p>We divide up these multiply tasks through from/to bounds - requiring no synchronisation as no mutable data is shared across threads.</p>

<p>Determining values for <strong>s</strong>, <strong>s2</strong> and <strong>s3</strong> is not straight-forward, they ultimately determine the tiling size which in turn demands an accurate estimate of the cache size on your target machine. Assuming square matrices which do not fit into a tall cache then</p>

<p style="text-align:center;">n = rowAmountOfA = colAmountOfA = rowAmountOfB</p>

<p style="text-align:center;">n > M/B</p>

<p>Once we determine <strong>s &#8804; M/B</strong> we can easily decompose submatrices (tiles) from matrix <strong>B</strong> that respect the target cache size</p>

<p><img src="/images/tiled.png" alt="m" /></p>

<p>As you would expect the tiling optimisation still results in <strong>Θ(n<sup>3</sup>)</strong> computations. With an optimal <strong>s</strong> value, <strong>Θ(M<sup>&frac12;</sup>)</strong>, we see an improvement in the amount of work done to that of our naive approach. The tall-cache assumption implies that each submatrix and its data will fit in cache, meaning only cold caches misses should occur per submatrix (<strong>Θ(s<sup>2</sup>/B)</strong>).</p>

<p style="text-align:center;">Θ(n) = Θ((n/s)<sup>3</sup>(s<sup>3</sup>)) = Θ(n<sup>3</sup>)</p>

<p style="text-align:center;">Q(n) = Θ((n/s)<sup>3</sup>(s<sup>2</sup>/B)) = Θ(n<sup>3</sup>/BM<sup>&frac12;</sup>)</p>

<p>From the above, as you might have guessed, we can see that <strong>s</strong> is actually a &ldquo;tuning&rdquo; parameter for cache-awareness. In our solution this tiling dividend is set to 4 which, from some rudimentary testing, is the optimal value on recent i5 and i7 processors (OS X 10.10).</p>

<h2>Dem Benchmarks: What was measured?</h2>

<p>Our benchmarking goal was to analyse the trends displayed across the executions of naive MMM and cache-aware MMM in conjunction with parallelisation. Thus the benchmarking process undertaken had the following features:</p>

<ol>
<li>A varying set of dimensions for <strong>A</strong> and <strong>B</strong> respectively on both algorithms were used to identify trends. The dimensions (200x200), (200x300), (1000x1000) and (1000x1200) were used.</li>
<li>To maintain measurement accuracy the elements held by <strong>A</strong> and <strong>B</strong> needed to be the same for each measurement. Every element held by <strong>A</strong> is always 2, while each element in <strong>B</strong> is always 3.</li>
<li>Each benchmark was conducted on two machines (4 core and 8 cores) under the same conditions (no other user processes running, machines connected to power outlets, etc.)</li>
</ol>


<p><img src="/images/i5.png" alt="m" /></p>

<p><img src="/images/i7.png" alt="m" /></p>

<h2>Dem Results</h2>

<p>Reflecting on the mean (μ) execution-time and according standard deviation (σ) provided by our benchmark runs, the collated results are as follows</p>

<p><img src="/images/res.png" alt="m" /></p>

<p>Our data poses several interesting avenues of investigation. However our main concern is exploring the benefits of cache-aware algorithms, so lets just explore the performance differences between both algorithms across runs. The bellow sidebar chart illustrates an obvious difference in our algorithms, at a glance one can see that there is large deviation between the naive and tiled time results.</p>

<p><img src="/images/data.png" alt="m" /></p>

<p>This is particularly true across the benchmarks where matrix dimensions are in their thousands. Such is unsurprising given that the naive algorithm is cache-oblivious. When viewing every sidebar related to the tiled results we can see that varying matrix dimensions do not greatly affect performance. Interestingly, we see that an increase in cores only greatly benefits the naive algorithm. It sees around a 55% improvement in execution-time with the assistance of 4 extra cores across all dimension sizes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matrix Multiply: Naive vs Cache-Aware Approaches (Part 1)]]></title>
    <link href="http:///blog/2015/06/07/matrix-multiply-naive-vs-cache-aware-approaches-1/"/>
    <updated>2015-06-07T17:12:21+01:00</updated>
    <id>http:///blog/2015/06/07/matrix-multiply-naive-vs-cache-aware-approaches-1</id>
    <content type="html"><![CDATA[<h2>Why, Why, Why?</h2>

<p>Before undertaking my postgraduate studies I led a quite joyous and sheltered life. Living the high life in the worlds of Ruby, Javascript, Python, Java and all of those sorts. My life got flipped-turned upside down when I began studying subjects like Secure Programming, Concurrent Programming and Formal Methods. For me, the biggest take-aways from these learnings were <a href="http://en.wikipedia.org/wiki/Parallel_algorithm">parallel algorithm design</a> and the <a href="http://en.wikipedia.org/wiki/Locality_of_reference">principle of locality</a>.
<img src="/images/fresh.png" alt="fresh" /></p>

<p>Most dense linear algebraic computations rely on the consideration of both spatial and temporal locality. If you are unfamiliar with locality, the former describes the tendency of applications to reference memory addresses that are near other recently accessed addresses and the latter describes the amount of reuse of the same memory locations.</p>

<p>One such linear algebra problem subject to this is dense <a href="http://en.wikipedia.org/wiki/Matrix_multiplication">Matrix-Matrix multiplication (MMM)</a>. Coincidentally MMM is also highly highly parallelisable so it is a perfect to demonstrate <a href="http://en.wikipedia.org/wiki/Parallel_algorithm">parallel algorithm design</a> and the <a href="http://en.wikipedia.org/wiki/Locality_of_reference">principle of locality</a>.</p>

<h2>Matrix Multiply, Ain&rsquo;t Nobody Got Time For That</h2>

<p>Matrix multiplication is important, it is actually central to many scientific computations. For instance, solving a linear system or least-square fits of coefficients to data rely on MMM implementations for good performance.</p>

<p>As you would expect, the performance of an MMM implementation is intimately related to the memory layout of the arrays. On modern shared-memory multiprocessors with multi-level memory hierarchies, naive access patterns in the memory hierarchy can incur cache capacity misses.</p>

<h2>Matrix Multiply, How Tho?</h2>

<p>MMM for square matrices has the following mathematical definition (which is independent of any implementation). Given two n x n matrices A and B, the sum and product</p>

<p style="text-align:center;">C + A ·B</p>

<p>For non-square matrices MMM differs in that the amount of columns in
matrix A must equal equal the amount of rows in B.</p>

<h2>Naive Matrix-Matrix Multiply</h2>

<p>The most naive algorithm for MMM comes straight from the above definition and mimics computing the product by hand. Assuming the arrays are stored such that rows of the arrays are in consecutive memory locations, i.e. row-major order, then we derive C as follows
<code>java
for (int i = 0; i &lt; rowAmount1; i++)
    for (int j = 0; j &lt; colAmount1; j++)
        for (int k = 0; k &lt; rowAmount2; k++)
            C[i][j] += (A[i][k] ∗ B[k][j]);
</code>
This algorithm is said to be naive because it suffers from poor locality. Elements of B are accessed column-wise, and therefore not in sequential order in memory. While each iteration in j reuses row i of A, that row may have been evicted from the cache by the time the inner-most loop completes. As a result, the algorithm is bandwidth limited and displays poor performance and low efficiency.</p>

<p>As we highlighted before, matrix multiplications have abundant parallel computation. While maintaining the less favourable design of this naive approach, let us introduce a parallelised implementation
<code>java
executor = Executors.newFixedThreadPool(10) ;
for (interval = numTasks, end = rowAmount1,
        size = (int) Math.ceil(rowAmount1 ∗ 1.0 / 10);
        interval &gt; 0 &amp;&amp; end &gt; 0; interval−−, end −= size){
    final int to = end;
    final int from = Math.max(0, end − size);
    Runnable runnable = new Runnable(){
        @Override
        public void run(){
            for (i = from; i &lt; to; i++)
                for (j = 0; j &lt; colAmount1; j++)
                    for (k = 0; k &lt; rowAmount2; k++)
                        C[i][j] += (A[i][k] ∗ B[k][j]);
        }
    };
    executor.execute(runnable);
}
</code></p>

<p>We must manually divide the work up into tasks and provide each task with its from/to bounds. Each task will run the entire outer loop but for only specific non-overlapping values. Thus there is no synchronisation in this implementation as no mutable data is shared across threads. The input arrays A and B are not mutated. While the contents of output array C are altered, each thread works on different slices.</p>

<h2>What&rsquo;s The Actual Damage Tho?</h2>

<p>When working with most matrix sizes this approach sees significant improvements in execution time against its sequential counterpart. However as you may expect these improvements are not linear against different matrix sizes.</p>

<p>The basic flaw of the naive triple-for-loop implementation is that the size of its per-loop working set prevents bandwidth amplification from the closest levels of the memory hierarchy, i.e. even with this parallelised horizontal-slicing approach the algorithm <strong>still suffers from poor locality</strong>.</p>

<h2>Until Next Time</h2>

<p><img src="/images/will.png" alt="will" />
Later on we shall investigate some fun stuff like Cache-Awareness and the Tall-Cache Assumption. Of course we&rsquo;ll then develop a cache-aware MMM algorithm using a &ldquo;tiling&rdquo; approach. Finally we will see some pretty benchmark graphs that demonstrate how our algorithms fared across different matrix sizes over a different number of cores.</p>
]]></content>
  </entry>
  
</feed>
