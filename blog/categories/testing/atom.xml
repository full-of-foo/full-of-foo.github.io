<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | ]]></title>
  <link href="http:///blog/categories/testing/atom.xml" rel="self"/>
  <link href="http:///"/>
  <updated>2017-03-19T21:17:10+00:00</updated>
  <id>http:///</id>
  <author>
    <name><![CDATA[Anthony Troy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mutation Testing Is Awesome: PIT for the JVM]]></title>
    <link href="http:///blog/2017/03/12/mutation-testing-is-awesome-pit-for-the-jvm/"/>
    <updated>2017-03-12T12:17:39+00:00</updated>
    <id>http:///blog/2017/03/12/mutation-testing-is-awesome-pit-for-the-jvm</id>
    <content type="html"><![CDATA[<p><img src="/images/dil.jpg" alt="dil" /></p>

<p>Nowadays its not all that popular to be a testing enthusiast or fanatic.</p>

<p>After all, <em>real developers ship</em> and <em>TDD is dead</em>, so developers ought to spend
less time getting caught up in testing-related hogwash and instead focus on the immediate
churning out of what is at hand. Be <em>10x</em>, <em>move fast and break things</em>, pew pew pew, and so on, and so on.</p>

<p><img src="/images/neck.png" alt="neck" />
Free time from shipping our way to <em>software unicorn</em> land is often spent perusing
blog posts from high-culture engineering forums. In doing so you
may have stumbled upon this strange blog, and, much too your dismay we&rsquo;ll be getting into plenty of
<em>1x</em> testing nonsense such as Mutation Testing, Code Coverage, Subsumption and all that jazz.</p>

<p>- Buckle up buckaroos.</p>

<h2>Back to Basics, Yo</h2>

<p>Remember, begin rolling your eyes when you hear the terms &ldquo;complete testing&rdquo;, &ldquo;exhaustive
testing&rdquo;, and &ldquo;full coverage&rdquo;. They are each poorly defined due to a
fundamental theoretical limitation of software - the number of potential
inputs for most programs is so large that they are effectively infinite.</p>

<p><img src="/images/rly.png" alt="rly" />
Consider <code>javac</code>. As a software artifact its potential inputs include not only every Java
program, but all strings. Its only limitation is the size of the file that can be read by the parser. Therefore, the number of inputs is effectively infinite and cannot be explicitly enumerated. It can never have &ldquo;full coverage&rdquo;.</p>

<p>Enter formal <em>coverage criteria</em>. As it is not feasible to generate all test inputs,
coverage criteria can be used to decide our inputs. The supposition here is that
coverage criteria will more effectively reveal faults (over using <code>n</code> arbitrary inputs).
Albeit expensive, the most obvious way to use criteria is to directly generate test case values
to satisfy the criterion <code>C</code>.</p>

<p>However, in practice we generally manually create an arbitrary amount of pseudo-random inputs, and then measure the tests against the criterion in terms of their coverage.
On the surface this understandable. Generating tests to directly satisfy
a criterion is hard, really hard. This particularly true when attempting generate test paths
for graph coverage criteria.</p>

<p>Not all is lost though. More flexible criteria do exist which, more importantly, can actually be used sustainably against real programs.</p>

<h2>Kanye test Grammar?</h2>

<p>The most common coverage criteria generate tests to satisfy their criterion based on either graphs, logical expressions, or partitions of input space. Graph and logical models are built from software artifacts, such as source code, design descriptions and specifications. Similarly, a model of the inputs can be built based on some description of an input space. Test criteria can then be applied to these models.
<img src="/images/kanye.png" alt="kanye" /></p>

<p>A fourth major source for test coverage criteria is syntactic descriptions of software artifacts.
Under syntax-based testing the syntax of the software artifact is used as the
model and tests are created from the syntax. One of the interesting things that grammars do is describe what an input is not. We say that an input is valid if it is in the language specified by the grammar, and
invalid otherwise.</p>

<p>Thus, it is often useful to produce invalid strings from a grammar. It is also helpful
in testing to use strings that are valid but that follow a different derivation from
a pre-existing string. This general use of grammar in testing is known as
mutation analysis, and it can be applied most types of software artifacts.</p>

<p>Albeit this all quite theoretical feeling thus far, mutation analysis has paved the
way for what is currently argued to be the <em>gold standard</em> in software testing - Program-based Mutation Testing.</p>

<!-- For example, it is quite common to require a program to reject
malformed inputs, and this property should clearly be tested, since it is easy for
programmers to forget it or get it wrong. -->




<!-- Mutation is always based on a set of “mutation operators,” which are expressed
with respect to a “ground” string. -->


<h2>Mutant Ninja Testing</h2>

<p>Although mutation testing sounds somewhat highbrow, its conceptually quite simple.
Faults, or <em>mutations</em>, are injected into one&rsquo;s testing target, and when those tests are ran there are total and per case mutation adequacy scores derived. Under most systems, given those tests have failed then the mutation is <em>killed</em> and if they have passed then the mutation has <em>survived</em>.
In turn, this total percentage of mutations killed acts as a testing criterion for
test case quality.</p>

<p>So, unlike traditional test coverage criteria that only measure which code is executed
by your tests, mutation testing actually measures the ability of your tests in revealing faults.
This premise of mutation testing is intuitively appealing; we can discover the input
data that can be used to reveal real faults. Nevertheless, as highlighted earlier, it is
not possible for any system to generate every possible permutation of
mutant in a candidate program.</p>

<p><img src="/images/turt.png" alt="turt" />
Consequently, mutation testing systems will only offer a finite set of injectable mutators. So, hopeful that these finite amount mutators will reveal faults, mutation testing can be
said to rely on two assumptions: the Competent Programmer Hypothesis (CPH)
and Coupling Effect.</p>

<p>The CPH asserts that a program produced by a competent programmer is
close to the final correct version of a program. Thus, it is assumed that the
source faults introduced by a competent programmer are relatively simple and
can be corrected by small syntactical changes. Accordingly, in mutation testing
only simple syntactical mutations are generally used. Contrarily, the Coupling
Effect brings the suggestion that tests capable of catching first order mutations
will also detect higher order mutations that contain these first order mutations.</p>

<!-- Mutation testing is conceptually quite simple.

Faults (or mutations) are automatically seeded into your code, then your tests are run. If your tests fail then the mutation is killed, if your tests pass then the mutation lived.

The quality of your tests can be gauged from the percentage of mutations killed.

runs your unit tests against automatically modified versions of your application code. When the application code changes, it should produce different results and cause the unit tests to fail. If a unit test does not fail in this situation, it may indicate an issue with the test suite. -->




<!-- Mutation testing is argued to be the ‘gold standard’ of software testing. It is
a well-established test criterion but an expensive one, as it involves generating
and running many tests across several mutants. Indeed PIT is not the only
mutation testing tool available for the JVM, however it is the most popular,
active, performant and configurable tool in this space. PIT is not intended to be
a replacement for code coverage systems, instead it can serve as a complementary
toolkit. Simply put, in a straightforward and effective way PIT helps ensure that
one is actually testing and verifying all the parts of the code that are assumed
to be otherwise covered. -->


<h2>Strong and Weak Mutations</h2>

<p>The implementation of mutation testing systems
are generally characterised in terms of their adopted mutation generation techniques.
Another distinction can be made with respect to
how a given tool analyses how mutants are killed during the execution process.
Such techniques can be classified as employing strong or weak mutation.
Under strong mutation given program <em>p</em>, a
mutant <em>m</em> of program <em>p</em> is said to be killed only if mutant <em>m</em> gives a different
output from the original program <em>p</em>.
<img src="/images/jug.png" alt="jug" /></p>

<p>In contrast, weak mutation requires only that the value produced at the point
we introduce <em>m</em> is different from the corresponding value in <em>p</em> for <em>m</em> to be killed.
This more optimal approach is adopted by tools such as by PIT; instead of analysing each mutant after the execution of the entire run,
mutants are checked immediately after their respective execution point.</p>

<h2>Killing Mutants with PIT: (╯°□°)&ndash;︻╦╤─ - - -</h2>

<p>PIT is a open-source mutation testing framework
for Java and the JVM. Formerly being named Parallel Isolated Test, the project&rsquo;s
initial function was to isolate static state through running JUnit tests in parallel
using separate classloaders, however the author later found that this turned out
to be a much less interesting problem than mutation testing which initially
needed a lot of the same plumbing.</p>

<p>Most importantly, as far as mutation testing projects go PIT is commercially popular
and actively contributed to. As you would expect, it too has first-class support for
the things like JUnit4, TestNg, Ant and Maven. Third-party support does also exist
for Gradle, Eclipse and InteliJ integrations.</p>

<p>In terms of design, mutation testing systems generally derive adequacy scores in four phases:
mutant generation, test selection, mutant insertion and mutant detection. PIT parallelises
these phases, making a mutation coverage run feel almost like a traditional statement coverage run.
Most testing frameworks in this space have adopted varying strategies in implementing each of
these phases. One reason for this disparity could be that many
JVM-based mutation testing systems have been written to meet the needs of
academic research.</p>

<p>PIT is currently positioned as being the most performant mutation testing tool
today, primarily due to fact that it adopts an effective byte code based approach in the mutant detection and generation phases. Generally systems will adopt either a source code or byte
based approach at these stages. Using byte code during the mutation detection phase
is quite computationally expensive, though this can be offset by an effective test
selection phase.
<img src="/images/doge2.png" alt="doge2" /></p>

<p>Additionally, systems using source code at the generation stage
can also incur a large computational cost if a naive approach is followed. Tools
like MuJava, Javalanche and Jumble too use byte code generation, however PIT performs various other optimisations. Rather than blindly running all cases against one mutation PIT will
first determine overall line coverage and subsequently run only those cases that
can actually reach the mutation.</p>

<h2>The Super Complicated Test Candidate</h2>

<p>Most tech blogs love using real-world code examples, so lets not be an exception to
that rule. Here we define a program that
allows one classify a triangle shape based on three supplied coordinates. A classification can be either equilateral, isosceles, scalene or invalid. Accordingly we implement a <code>TriangleType</code>
enum and following we define our <code>Triangle</code> class with one static method for classification.</p>

<pre><code class="java">public enum TriangleType {
  INVALID, SCALENE, EQUILATERAL, ISOSCELES
}
</code></pre>

<pre><code class="java">public class Triangle {
  public static TriangleType classify(final int a, final int b, final int c) {
    int trian;
    if ((a &lt;= 0) || (b &lt;= 0) || (c &lt;= 0)) {
      return TriangleType.INVALID;
    }
    trian = 0;
    if (a == b) {
      trian = trian + 1;
    }
    if (a == c) {
      trian = trian + 2;
    }
    if (b == c) {
      trian = trian + 3;
    }
    if (trian == 0) {
      if (((a + b) &lt; c) || ((a + c) &lt; b) || ((b + c) &lt; a)) {
        return TriangleType.INVALID;
      } else {
        return TriangleType.SCALENE;
      }
    }
    if (trian &gt; 3) {
      return TriangleType.EQUILATERAL;
    }
    if ((trian == 1) &amp;&amp; ((a + b) &gt; c)) {
      return TriangleType.ISOSCELES;
    } else if ((trian == 2) &amp;&amp; ((a + c) &gt; b)) {
      return TriangleType.ISOSCELES;
    } else if ((trian == 3) &amp;&amp; ((b + c) &gt; a)) {
      return TriangleType.ISOSCELES;
    }
    return TriangleType.INVALID;
  }
}
</code></pre>

<p>We also implement a <code>TriangleTest</code> case, and because we&rsquo;re good testers we ensure to meet total line coverage:
<code>java
public class TriangleTest {
  @Test
  public void test1() {
    final TriangleType type = Triangle.classify(1, 2, 3);
    assertEquals(SCALENE, type);
  }
  @Test
  public void testInvalid1() {
    final TriangleType type = Triangle.classify(1, 2, 4);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalid2() {
    final TriangleType type = Triangle.classify(1, 4, 2);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalid3() {
    final TriangleType type = Triangle.classify(4, 1, 2);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalidNeg1() {
    final TriangleType type = Triangle.classify(-1, 1, 1);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalidNeg2() {
    final TriangleType type = Triangle.classify(1, -1, 1);
    assertEquals(INVALID, type);
  }
  @Test
  public void testInvalidNeg3() {
    final TriangleType type = Triangle.classify(1, 1, -1);
    assertEquals(INVALID, type);
  }
  @Test
  public void testEquiliteral() {
    final TriangleType type = Triangle.classify(1, 1, 1);
    assertEquals(EQUILATERAL, type);
  }
  @Test
  public void testIsoceles1() {
    final TriangleType type = Triangle.classify(2, 2, 3);
    assertEquals(ISOSCELES, type);
  }
  @Test
  public void testIsoceles2() {
    final TriangleType type = Triangle.classify(2, 3, 2);
    assertEquals(ISOSCELES, type);
  }
  @Test
  public void testIsoceles3() {
    final TriangleType type = Triangle.classify(3, 2, 2);
    assertEquals(ISOSCELES, type);
  }
  @Test
  public void testInvalid() {
    final TriangleType type = Triangle.classify(3, 1, 1);
    assertEquals(INVALID, type);
  }
}
</code></p>

<p>So now lets gets webscale and get our candidate unit tested and mutation tested
under Maven. The <code>pitest</code> artifact and its related dependencies are hosted by Sonatype so we can add the typical <code>oss-sonatype</code> <code>repository</code> and <code>pluginRepository</code> entries to our <code>pom.xml</code>. We can then simply  configure PIT under JUnit4 as follows:
<code>xml
  ...
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.11&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.4&lt;/version&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.pitest&lt;/groupId&gt;
            &lt;artifactId&gt;pitest-maven&lt;/artifactId&gt;
            &lt;version&gt;1.1.10-SNAPSHOT&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;verify&lt;/id&gt;
                    &lt;phase&gt;verify&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;mutationCoverage&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
  ...
</code>
Unless we configure PIT to employ a whitelist of mutation operations,
it will use a default of four default mutation operations. Of a possible sixteen
operations these four are perhaps the most useful and least expensive:</p>

<ol>
<li>Negate Conditionals Mutator inverts all conditionals
to their boundary counterpart.

<ul>
<li><code>boolean a = 1 == 2;</code> becomes mutated to <code>boolean a = 1 != 2;</code></li>
</ul>
</li>
<li>Conditionals Boundary Mutator replaces relational operators
with their boundary counterpart.

<ul>
<li><code>int a = 1 &gt; 2;</code> becomes mutated to <code>int a = 1 &lt;= 2;</code></li>
</ul>
</li>
<li>Return Values Mutator mutates the return values of method calls.

<ul>
<li><code>return new Object();</code> becomes mutated to <code>new Object(); return null;</code></li>
<li><code>return new Long(123);</code> becomes mutated to <code>return new Long(123)+1;</code></li>
</ul>
</li>
<li>Math Mutator replaces binary arithmetic operations for either integer or floating-point arithmetic with another operation.

<ul>
<li><code>int a = 1 + 1</code> becomes mutated to <code>int a = 1 - 1</code></li>
</ul>
</li>
</ol>


<h2>Testing Tests While Testing</h2>

<p>Given our configuration, PIT will now perform mutation testing at end the of the Maven <code>verfiy</code> lifecycle
phases (after <code>test</code>). This involves running both line coverage and mutation coverage testing:</p>

<pre><code class="bash">&gt; $ mvn verify
            ....
[INFO] Adding org.pitest:pitest to SUT classpath
[INFO] Mutating from /usr/src/app/maven-pit-review/target/classes
[INFO] Defaulting to group id (com.review.app*)
PIT &gt;&gt; INFO : Sending 1 test classes to minion
PIT &gt;&gt; INFO : Sent tests to minion
PIT &gt;&gt; INFO : MINION : PIT &gt;&gt; INFO : Checking environment
PIT &gt;&gt; INFO : MINION : PIT &gt;&gt; INFO : Found  12 tests
PIT &gt;&gt; INFO : MINION : PIT &gt;&gt; INFO : Dependency analysis reduced number of potential tests by 0
PIT &gt;&gt; INFO : MINION : PIT &gt;&gt; INFO : 12 tests received
PIT &gt;&gt; INFO : Calculated coverage in 0 seconds.
PIT &gt;&gt; INFO : Created  1 mutation test units
PIT &gt;&gt; INFO : Completed in 3 seconds
              ....
================================================================================
- Statistics
================================================================================
&gt;&gt; Generated 44 mutations Killed 36 (82%)
&gt;&gt; Ran 115 tests (2.61 tests per mutation)
================================================================================
- Mutators
================================================================================
&gt; org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator
&gt;&gt; Generated 10 Killed 2 (20%)
&gt; KILLED 2 SURVIVED 8 TIMED_OUT 0 NON_VIABLE 0
&gt; MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0
&gt; NO_COVERAGE 0
--------------------------------------------------------------------------------
&gt; org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator
&gt;&gt; Generated 8 Killed 8 (100%)
&gt; KILLED 8 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0
&gt; MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0
&gt; NO_COVERAGE 0
--------------------------------------------------------------------------------
&gt; org.pitest.mutationtest.engine.gregor.mutators.MathMutator
&gt;&gt; Generated 9 Killed 9 (100%)
&gt; KILLED 9 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0
&gt; MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0
&gt; NO_COVERAGE 0
--------------------------------------------------------------------------------
&gt; org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator
&gt;&gt; Generated 17 Killed 17 (100%)
&gt; KILLED 17 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0
&gt; MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0
&gt; NO_COVERAGE 0
--------------------------------------------------------------------------------
</code></pre>

<p>So, who would of guessed, our &ldquo;total covered&rdquo; candidate app yields 44 mutations
but eight survive. Resulting in a total mutation
adequacy score of 82%. The default mutation operations are generated
across our 12 test cases, resulting in the execution of 115 mutated test cases.
So what is this tellings us about our tests? It means for each test run against a mutated version of the program all of the mutants can be reached (because we have full statement coverage). However, for eight of these runs at least the respective fault goes unnoticed as the tests pass.</p>
]]></content>
  </entry>
  
</feed>
